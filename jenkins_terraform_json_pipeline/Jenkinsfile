pipeline {
    agent any

    environment {
        ENV         = ''
        REGION      = ''
        INSTANCE    = ''
        KEY_NAME    = ''
        OWNER       = ''
    }

    stages {
        stage('Read JSON Config') {
            steps {
                script {
                    def json = readFile('config.json')
                    def config = new groovy.json.JsonSlurper().parseText(json)

                    // Export values as environment variables
                    env.ENV      = config.env
                    env.REGION   = config.region
                    env.INSTANCE = config.vars.instance_type
                    env.KEY_NAME = config.vars.key_name
                    env.OWNER    = config.vars.owner

                    // Modules list for next stage (store in global scope variable)
                    modulesList = config.modules
                }
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    def modules = new groovy.json.JsonSlurper().parseText(readFile('config.json')).modules
                    for (mod in modules) {
                        echo "üì¶ Initializing Terraform module: ${mod}"
                        dir("modules/${mod}") {
                            sh 'terraform init -input=false'
                        }
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    def modules = new groovy.json.JsonSlurper().parseText(readFile('config.json')).modules
                    for (mod in modules) {
                        echo "üìù Planning Terraform module: ${mod}"
                        dir("modules/${mod}") {
                            sh """
                                terraform plan \\
                                  -var='region=${env.REGION}' \\
                                  -var='instance_type=${env.INSTANCE}' \\
                                  -var='key_name=${env.KEY_NAME}' \\
                                  -var='owner=${env.OWNER}' \\
                                  -out=tfplan
                            """
                        }
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                input message: 'Proceed with apply?', ok: 'Yes, deploy'

                script {
                    def modules = new groovy.json.JsonSlurper().parseText(readFile('config.json')).modules
                    for (mod in modules) {
                        echo "üöÄ Applying Terraform module: ${mod}"
                        dir("modules/${mod}") {
                            sh 'terraform apply -auto-approve tfplan'
                        }
                    }
                }
            }
        }
    }
}
