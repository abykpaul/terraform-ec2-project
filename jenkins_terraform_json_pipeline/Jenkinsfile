import groovy.json.JsonSlurper

pipeline {
    agent any

    environment {
        TF_PLUGIN_CACHE_DIR = "C:\\TerraformPluginCache"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Read JSON Config') {
            steps {
                script {
                    def jsonFile = 'jenkins_terraform_json_pipeline/config.json'
                    if (!fileExists(jsonFile)) {
                        error "‚ùå config.json not found at path: ${jsonFile}"
                    }
                    def config = new JsonSlurper().parseText(readFile(jsonFile))
                    env.ENV     = config.env
                    env.REGION  = config.region
                    env.MODULES = config.modules.join(',')
                    echo "‚úÖ ENV: ${env.ENV}, REGION: ${env.REGION}, MODULES: ${env.MODULES}"
                }
            }
        }

        stage('Terraform Init/Apply for Modules') {
            steps {
                script {
                    def modules = env.MODULES.split(',')
                    modules.each { mod ->
                        echo "üîß Processing module: ${mod}"
                        def path = "jenkins_terraform_json_pipeline/modules/${mod}"
                        if (fileExists("${path}/main.tf")) {
                            dir(path) {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    withEnv(["TF_PLUGIN_CACHE_DIR=${env.TF_PLUGIN_CACHE_DIR}"]) {
                                        bat """
                                            terraform init
                                            terraform apply -var-file=../../${env.ENV}.tfvars -auto-approve
                                        """
                                    }
                                }
                            }
                        } else {
                            echo "‚ö†Ô∏è Module skipped: ${mod} ‚Äî main.tf not found"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "‚úÖ Pipeline completed for ENV: ${env.ENV}"
        }
    }
}
