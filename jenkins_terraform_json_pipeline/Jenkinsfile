pipeline {
    agent any

    environment {
        MODULE_DIR = 'jenkins_terraform_json_pipeline/modules'
        TF_VAR_instance_type = 't2.micro'
        TF_VAR_key_name = 'My-Devops-Key'
        TF_VAR_owner = 'jack'
    }

    stages {
        stage('Git Clone') {
            steps {
                git url: 'https://github.com/abykpaul/terraform-ec2-project.git', branch: 'main'
            }
        }

        stage('Read Config') {
            steps {
                script {
                    def config = readFile('config.json')
                    def json = new groovy.json.JsonSlurper().parseText(config)
                    env.ENV = json.env
                    env.REGION = json.region
                    echo "üîç ENV: ${env.ENV}"
                    echo "üåç REGION: ${env.REGION}"
                }
            }
        }

        stage('Terraform Apply per Module') {
            steps {
                script {
                    def modules = ['vpc', 'ec2', 'rds']  // update as per your structure

                    modules.each { module ->
                        echo "üîß Processing module: ${module}"
                        def modulePath = "${MODULE_DIR}/${module}"

                        if (fileExists("${modulePath}/main.tf")) {
                            dir(modulePath) {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    withEnv([
                                        "TF_VAR_instance_type=${env.TF_VAR_instance_type}",
                                        "TF_VAR_key_name=${env.TF_VAR_key_name}",
                                        "TF_VAR_owner=${env.TF_VAR_owner}"
                                    ]) {
                                        bat 'terraform init'
                                        bat 'terraform apply -auto-approve'
                                    }
                                }
                            }
                        } else {
                            echo "‚ö†Ô∏è Skipping ${module} ‚Äî no Terraform config found"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üì¶ Pipeline completed for ENV: ${env.ENV}"
        }
    }
}
