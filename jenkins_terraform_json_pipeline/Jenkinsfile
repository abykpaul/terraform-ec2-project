import groovy.json.JsonSlurper

pipeline {
    agent any

    environment {
        // Define reusable variables
        TF_PLUGIN_CACHE_DIR = "C:\\TerraformPluginCache"
        TF_FLAGS = "-var 'instance_type=t2.micro' -var 'key_name=My-Devops-Key' -var 'owner=jack'"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Parse config.json') {
            steps {
                script {
                    def jsonFile = readFile('jenkins_terraform_json_pipeline/config.json')
                    def config = new JsonSlurper().parseText(jsonFile)

                    env.ENV = config.env
                    env.REGION = config.region
                    env.MODULES = config.modules.join(',')  // store list as comma-separated string

                    echo "‚úÖ ENV: ${env.ENV}"
                    echo "üåç REGION: ${env.REGION}"
                    echo "üì¶ MODULES: ${env.MODULES}"
                }
            }
        }

        stage('Terraform Modules Apply') {
            steps {
                script {
                    def modules = env.MODULES.split(',')

                    modules.each { mod ->
                        echo "üîß Processing module: ${mod}"

                        def modulePath = "jenkins_terraform_json_pipeline\\modules\\${mod}"

                        // Ensure .tf file exists before applying
                        if (fileExists("${modulePath}/main.tf")) {
                            dir(modulePath) {
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                                    withEnv(["TF_PLUGIN_CACHE_DIR=${env.TF_PLUGIN_CACHE_DIR}"]) {
                                        bat """
                                            echo Running terraform in: ${modulePath}
                                            terraform init
                                            terraform apply ${env.TF_FLAGS} -auto-approve
                                        """
                                    }
                                }
                            }
                        } else {
                            echo "‚ö†Ô∏è Skipping ${mod} ‚Äî main.tf not found"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üì¶ Pipeline completed for ENV: ${env.ENV}"
        }
    }
}
